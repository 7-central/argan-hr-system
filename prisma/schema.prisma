generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin users who manage the HR system
model Admin {
  id           String      @id @default(uuid())
  email        String      @unique
  passwordHash String      @map("password_hash")
  name         String
  role         AdminRole   @default(ADMIN)
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Rate Limiting
  failedLoginAttempts Int      @default(0) @map("failed_login_attempts")
  lastFailedAttempt   DateTime? @map("last_failed_attempt")
  lockedUntil         DateTime? @map("locked_until")

  // Relations
  createdClients Client[]  @relation("ClientCreator")

  @@index([email])
  @@index([isActive])
  @@map("admins")
}

// HR consultancy clients (companies or individuals)
model Client {
  id                  Int           @id @default(autoincrement())

  // Business Info
  clientType          ClientType    @default(COMPANY) @map("client_type")
  companyName         String        @map("company_name")
  businessId          String?       @map("business_id")
  sector              String?

  // Service Classification
  serviceTier         ServiceTier   @map("service_tier")
  monthlyRetainer     Decimal?      @map("monthly_retainer") @db.Decimal(10, 2)

  // Primary Contact
  contactName         String        @map("contact_name")
  contactEmail        String        @map("contact_email")
  contactPhone        String?       @map("contact_phone")

  // Address
  addressLine1        String?       @map("address_line_1")
  addressLine2        String?       @map("address_line_2")
  city                String?
  postcode            String?
  country             String?       @default("United Kingdom")

  // Contract
  contractStartDate   DateTime?     @map("contract_start_date") @db.Date
  contractRenewalDate DateTime?     @map("contract_renewal_date") @db.Date

  // Status
  status              ClientStatus  @default(ACTIVE)

  // Onboarding checklist
  welcomeEmailSent    Boolean       @default(false) @map("welcome_email_sent")

  // Payment & Infrastructure (moved from Contract - client-level, not contract-level)
  paymentMethod               PaymentMethod? @map("payment_method")
  chargeVat                   Boolean        @default(true) @map("charge_vat") // Whether VAT is charged on invoices
  directDebitSetup            Boolean?       @map("direct_debit_setup")        // null = N/A (not Direct Debit), false = pending, true = complete
  directDebitConfirmed        Boolean?       @map("direct_debit_confirmed")    // null = N/A (not Direct Debit), false = pending, true = complete
  contractAddedToXero         Boolean        @default(false) @map("contract_added_to_xero")
  recurringInvoiceSetup       Boolean?       @map("recurring_invoice_setup")   // null = N/A (not Invoice), false = pending, true = complete
  dpaSignedGdpr               Boolean        @default(false) @map("dpa_signed_gdpr")
  firstInvoiceSent            Boolean        @default(false) @map("first_invoice_sent")
  firstPaymentMade            Boolean        @default(false) @map("first_payment_made")
  lastPriceIncrease           DateTime?      @map("last_price_increase") @db.Date

  // Audit
  externalAudit       Boolean       @default(false) @map("external_audit")

  // Metadata
  createdBy           String?       @map("created_by")
  createdByAdmin      Admin?        @relation("ClientCreator", fields: [createdBy], references: [id])
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  // Relations
  contacts            ClientContact[]
  contracts           Contract[]
  policies            Policy[]
  handbooks           Handbook[]
  internals           Internal[]
  archives            Archive[]
  audits              ClientAudit[]

  @@index([status])
  @@index([serviceTier])
  @@index([companyName])
  @@map("clients")
}

// Client contacts (Primary, Secondary, Invoice)
model ClientContact {
  id        Int         @id @default(autoincrement())
  clientId  Int         @map("client_id")
  type      ContactType
  name      String
  email     String
  phone     String?
  role      String?
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relations
  client    Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Business rule: Only one contact of each type per client
  @@unique([clientId, type])
  @@index([clientId])
  @@index([type])
  @@map("client_contacts")
}

// Client contracts - service agreements and payment terms
model Contract {
  id                            Int             @id @default(autoincrement())
  contractNumber                String          @unique @map("contract_number") // Format: CON-1-001-001
  version                       Int             @default(1) // Contract version for this client (V1, V2, V3, etc.)
  clientId                      Int             @map("client_id")

  // Core contract dates
  contractStartDate             DateTime        @map("contract_start_date") @db.Date
  contractRenewalDate           DateTime        @map("contract_renewal_date") @db.Date

  // Contract status
  status                        ContractStatus  @default(ACTIVE)
  docUrl                        String?         @map("doc_url")
  signedContractUrl             String?         @map("signed_contract_url")
  signedContractReceived        Boolean         @default(false) @map("signed_contract_received")
  contractUploaded              Boolean         @default(false) @map("contract_uploaded")

  // Onboarding checklist (contract-specific items)
  contractSentToClient          Boolean         @default(false) @map("contract_sent_to_client")
  paymentTermsAgreed            Boolean         @default(false) @map("payment_terms_agreed")
  outOfScopeRateAgreed          Boolean         @default(false) @map("out_of_scope_rate_agreed")

  // Agreed Service (In Scope) - Inclusive hours and services
  hrAdminInclusiveHours         Decimal?        @map("hr_admin_inclusive_hours") @db.Decimal(5, 2)
  hrAdminInclusiveHoursPeriod   HoursPeriod?    @map("hr_admin_inclusive_hours_period")
  employmentLawInclusiveHours   Decimal?        @map("employment_law_inclusive_hours") @db.Decimal(5, 2)
  employmentLawInclusiveHoursPeriod HoursPeriod? @map("employment_law_inclusive_hours_period")
  inclusiveServicesInScope      String[]        @default([]) @map("inclusive_services_in_scope")

  // Extra Rates (Out of Scope / Ad-hoc) - Rates and services
  inclusiveServicesOutOfScope   String[]        @default([]) @map("inclusive_services_out_of_scope")
  hrAdminRate                   Decimal?        @map("hr_admin_rate") @db.Decimal(10, 2)
  hrAdminRateUnit               RateUnit?       @map("hr_admin_rate_unit")
  hrAdminRateNotNeeded          Boolean         @default(false) @map("hr_admin_rate_not_needed")
  employmentLawRate             Decimal?        @map("employment_law_rate") @db.Decimal(10, 2)
  employmentLawRateUnit         RateUnit?       @map("employment_law_rate_unit")
  employmentLawRateNotNeeded    Boolean         @default(false) @map("employment_law_rate_not_needed")
  mileageRate                   Decimal?        @map("mileage_rate") @db.Decimal(10, 2)
  mileageRateNotNeeded          Boolean         @default(false) @map("mileage_rate_not_needed")
  overnightRate                 Decimal?        @map("overnight_rate") @db.Decimal(10, 2)
  overnightRateNotNeeded        Boolean         @default(false) @map("overnight_rate_not_needed")

  // Metadata
  createdAt                     DateTime        @default(now()) @map("created_at")
  updatedAt                     DateTime        @updatedAt @map("updated_at")

  // Relations
  client                        Client          @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([status])
  @@index([contractNumber])
  @@map("contracts")
}

// Client policies - policy documents and tracking
model Policy {
  id            Int      @id @default(autoincrement())
  policyNumber  String   @unique @map("policy_number") // Format: POL-1-001-001
  clientId      Int      @map("client_id")

  // Metadata
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  client        Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([policyNumber])
  @@map("policies")
}

// Client handbooks - employee handbook documents
model Handbook {
  id              Int      @id @default(autoincrement())
  handbookNumber  String   @unique @map("handbook_number") // Format: HAN-1-001-001
  clientId        Int      @map("client_id")

  // Metadata
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([handbookNumber])
  @@map("handbooks")
}

// Internal documents - internal company documents
model Internal {
  id              Int      @id @default(autoincrement())
  internalNumber  String   @unique @map("internal_number") // Format: INT-1-001-001
  clientId        Int      @map("client_id")

  // Metadata
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([internalNumber])
  @@map("internals")
}

// Archive - archived documents
model Archive {
  id             Int      @id @default(autoincrement())
  archiveNumber  String   @unique @map("archive_number") // Format: ARC-1-001-001
  clientId       Int      @map("client_id")

  // Metadata
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  client         Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([archiveNumber])
  @@map("archives")
}

// Client audit - external audit tracking (one client can have multiple auditors)
model ClientAudit {
  id            Int           @id @default(autoincrement())
  clientId      Int           @map("client_id")

  // Auditor details
  auditedBy     String        @map("audited_by")
  interval      AuditInterval
  nextAuditDate DateTime      @map("next_audit_date") @db.Date

  // Metadata
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  client        Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([nextAuditDate])
  @@map("client_audits")
}

// Enums
enum AdminRole {
  SUPER_ADMIN
  ADMIN
  READ_ONLY
}

enum ServiceTier {
  TIER_1    @map("tier_1")
  DOC_ONLY  @map("doc_only")
  AD_HOC    @map("ad_hoc")
}

enum ClientStatus {
  ACTIVE    @map("active")
  INACTIVE  @map("inactive")
  PENDING   @map("pending")
}

enum ContactType {
  PRIMARY
  SECONDARY
  INVOICE
}

enum ContractStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum PaymentMethod {
  DIRECT_DEBIT  @map("direct_debit")
  INVOICE       @map("invoice")
}

enum RateUnit {
  HOURLY  @map("hourly")
  DAILY   @map("daily")
}

enum HoursPeriod {
  WEEKLY     @map("weekly")
  MONTHLY    @map("monthly")
  QUARTERLY  @map("quarterly")
  YEARLY     @map("yearly")
}

enum AuditInterval {
  QUARTERLY    @map("quarterly")
  ANNUALLY     @map("annually")
  TWO_YEARS    @map("two_years")
  THREE_YEARS  @map("three_years")
  FIVE_YEARS   @map("five_years")
}

enum ClientType {
  COMPANY      @map("company")
  INDIVIDUAL   @map("individual")
}
